#!/usr/bin/env node

var hascan = require('../lib/hascan'),
    path = require('path'),
    fs = require('fs'),
    _ = require('underscore');

var usage = ''
    + '\n'
    + 'Usage: hascan [options] [features]\n'
    + '\n'
    + '    -b, --build              builds has.js with only the tests you want\n'
    + '                                Use [features] arguments to specify feature tests to include\n'
    + '                                Use --file or stdin to include only features tested in JS source\n'
    + '    -e, --eliminate          eliminates has() branches for unavailable features\n'
    + '                                Use [features] arguments to specify available features\n'
    + '                                Use --agent to look up the features available for a user-agent\n'
    + '                                Use --file option or stdin to provide JavaScript to process\n'
    + '    -s, --features           shows a list of features supported by a user agent\n'
    + '                                Use --agent to specify the user-agent to query\n'
    + '                                Use [features] arguments to limit list to a set of features\n'
    + '    -t, --tests              shows the names of all tests supported\n'
    + '    -u, --update             downloads the latest data from Browserscope to has.json\n'
    + '\n'
    + '    -a, --agent              user agent string\n'
    + '    -f, --file               path of a file to read in\n'
    + '    -m, --minify             minify generated source code\n'
    + '\n'
    + '    -h, --help               output help information\n'
    ;

var args = process.argv.slice(2);
var command;
var userAgent, minify, filePath;
var features = [];
var expected;

while (args.length) {
    var arg = args.shift();
    if (expected == 'agent') {
        userAgent = arg;
        expected = null;
    } else if (expected == 'file') {
        filePath = arg;
        expected = null;
    } else {
        switch (arg) {
            case '-b':
            case '--build':
                command = function() { build(filePath, minify, features); }
                break;
            case '-e':
            case '--eliminate':
                command = function() { eliminate(filePath, userAgent, minify, features); }
                break;
            case '-f':
            case '--file':
                expected = 'file';
                break;
            case '-m':
            case '--minify':
                minify = true;
                break;
            case '-s':
            case '--features':
                command = function() { listFeatures(userAgent, features); }
                break;
            case '-a':
            case '--agent':
                expected = 'agent';
                break;
            case '-t':
            case '--tests':
                command = tests;
                break;
            case '-u':
            case '--update':
                command = update;
                break;
            case '-h':
            case '--help':
                abort(usage);
                break;
            default:
                features.push(arg);
        }
    }
}

if (command) {
    command(features);
} else {
    abort(usage);
}

function build(filePath, minify, features) {
    readInput(filePath, !features || !features.length, function(err, source) {
        if (source) {
            features = hascan.findFeatureTests(source);
        }

        hascan.buildHasWithTests(features, minify, function(err, js) {
            if (err) {
                console.error(err);
            } else {
                console.log(js);    
            }
        });
    });
}

function eliminate(filePath, userAgent, minify, features) {
    readInput(filePath, true, function(err, source) {
        if (userAgent) {
            hascan.getFeatureDB(function(err, featureDB) {
                if (err) {
                    console.error("Error loading feature database: " + err)
                } else {
                    var featureMap = featureDB.getFeatureMap(userAgent);
                    complete(source, featureMap);
                }
            });
        } else {
            var featureMap = {};
            for (var i = 0; i < features.length; ++i) {
                featureMap[features[i]] = true;
            }

            complete(source, featureMap);
        }        
    });

    function complete(source, featureMap) {
        var source = hascan.eliminateFeatureTests(source, featureMap, minify, !minify);
        console.log(source);
    }
}

function listFeatures(userAgent, features) {
    if (!userAgent) {
        abort("You must specify a user-agent with --agent.");
    }

    hascan.getFeatureDB(features, function(err, featureDB) {
        if (err) {
            console.error("Error loading feature database: " + err)
        } else {
            var featureMap = featureDB.getFeatureMap(userAgent);
            for (var feature in featureMap) {
                if (featureMap[feature]) {
                    console.log(feature);
                }
            }
        }
    });
}

function tests(features) {
    var userAgent = features.shift();

    hascan.readFeatures(function(err, hasData) {
        if (err) {
            console.error("Error loading feature database: ")
            console.error(err)
        } else {
            for (var browserId in hasData.results) {
                for (var featureId in hasData.results[browserId].results) {
                    console.log(featureId);
                }
                break;
            }
        }
    });
}

function update() {
    console.log('Contacting Browserscope...');
    hascan.downloadTests(function(err, newBrowsers) {
        if (err) {
            console.error("Unable to download tests.");
        } else if (newBrowsers.length) {
            console.log(newBrowsers.length +
                        ' new browser' + (newBrowsers.length > 1 ? 's' : '') + ' found: ' +
                        newBrowsers.join(', '));
        } else {
            console.log('No new browsers found.');
        }        
    });
}

function readInput(filePath, readStdin, cb) {
    if (filePath) {
        fs.readFile(filePath, function(err, data) {
            if (err) {
                cb(err);
            } else {
                cb(0, data+'');
            }
        });
    } else if (readStdin) {
        process.stdin.resume();
        process.stdin.setEncoding('utf8');

        var chunks = [];
        process.stdin.on('data', function(chunk) {
            chunks.push(chunk);
        });
        process.stdin.on('end', function(chunk) {
            var data = chunks.join('');
            cb(0, data);
        });
        process.stdin.on('error', function(err) {
            cb(err);
        });
    } else {
        cb(0, '');
    }
}

function abort(str) {
    console.error(str);
    process.exit(1);
}
